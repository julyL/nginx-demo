worker_processes  1;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    server_names_hash_bucket_size 512;

    sendfile        on;

    keepalive_timeout  65;
    
    # server {
    #     listen 80;
    #     server_name www.elfinbook.com;  # 访问域名

    #     location /{
    #         proxy_pass http://127.0.0.1:3000;
    #     }
    # }
    # server {
    #     listen 80;
    #     server_name  https://app.elfinbook.com;  # 访问域名

    #     location /{
    #         proxy_pass http://127.0.0.1:80;
    #     }
    # }
    server {
        listen       443;
        server_name  app.elfinbook.com;
        ssl_certificate  private/cert.crt;
        ssl_certificate_key  private/cert.key;
        ssl_dhparam  private/cert.pem;

        location / {
          proxy_pass https://localhost:80;
        }
    }
    # server {
    #     listen 80;
    #     server_name m.elfinbook.test.hzqihui.cn;  # 访问域名

    #     location /{
    #         proxy_pass http://127.0.0.1:3000;
    #     }
    # }
    # server {
    #     listen 80;
    #     server_name m.elfinbook.com;  # 访问域名

    #     location /{
    #         proxy_pass http://127.0.0.1:3000;
    #         # koa启动的服务是3000端口,代理到80后可以直接通过localhost访问
    #         # index index.html
    #     }
    # }
    # server {
    #     listen 80;
    #     server_name cdn.elfinbook.com;  # 访问域名

    #     location /{
    #         proxy_pass http://127.0.0.1:4001;
    #         # koa启动的服务是3000端口,代理到80后可以直接通过localhost访问
    #         # index index.html
    #     }
    # 

    # server {
    #     listen 443 ssl;
    #     server_name  localhost;  # 访问域名

    #     location /{
    #         proxy_pass https://127.0.0.1:8080;
    #         # proxy_ssl_certificate         E:\\nginx\\nginx\\conf\\ssl\\wechat.yitianyishu.com.pem;
    #         # proxy_ssl_certificate_key     E:\\nginx\\nginx\\conf\\ssl\\wechat.yitianyishu.com.key; 
    #         # proxy_ssl_session_timeout  5m;
    #         index index.html;
    #         # koa启动的服务是3000端口,代理到80后可以直接通过localhost访问
    #     }
    # }
    # server {  
    #     listen 80;  
    #     server_name cdn.elfinbook.com;
    
    #     location / {  
    #         proxy_pass         http://127.0.0.1:8000;  
    #         # proxy_redirect     off;  
        
    #         # proxy_set_header   Host              $host;  
    #         # proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;  
    #         # proxy_set_header   X-Forwarded-Proto $scheme;  
    #     }  
    # } 

    # server {
    #     listen 80;
    #     server_name  admin.homestay.com;  # 访问域名

    #     location /{
    #         proxy_pass http://127.0.0.1:3000;   
    #         # koa启动的服务是3000端口,代理到80后可以直接通过localhost访问
    #         # index index.html
    #     }

        # location ^~ /a/ {
        #     rewrite '^/a$'  /b;            #  /a  =>  /b
        #     rewrite  '^/a/(.*)'  /b/$1;    #  /a/c  =>  /b/c
        # }

        # location ~ ^/a/ {
        #     rewrite '^/a$'  /d;
        #     rewrite  '^/a/(.*)'  /d/$1;
        # }

        # location  = /old {         #  /old => /new
        #     return 301 /new;
        # }


        # 示例1  
        # /page?id=xxx => /page/xxx
        # location  ~ ^/page$ {
        #   if ($query_string  ~ "id=([^&#=]*)" ){    
        #      set  $id  $1;  
        #      rewrite  ^/page$  /page/$id? break; 
        #   }   
        #   rewrite (.*)  /new;   # 不加这行,访问/page将返回404
        # }   


        # 优先级示例  
        # 如果路径能够匹配的如下中某些规则,那么规则优先级是 level1 > level2 > ...  (前提是能匹配时才比较优先级)
        
        # 只能完全匹配 /p
        # location = /p {    
        #     rewrite  /   /level/1;
        # }

        #  完全匹配 /p
        # location  /p {
        #     rewrite  /   /level/2;
        # }

        # 只能匹配 /p/开头的路径  eg: /p/abc
        # location ^~ /p/ {
        #     rewrite  /   /level/3;
        # }

        # # 区分大小写的正则匹配
        # location  ~ ^/p(.*)$ {     
        #     rewrite  /   /level/4;
        # }

        # # 不区分大小写的正则匹配
        # location  ~* ^/p(.*)$ {
        #     rewrite  /   /level/4;
        # }

        # 只能匹配 /p/开头的路径 
        # location  /p/ {
        #     rewrite  /   /level/5;
        # }


        # flag示例

        # location  /a {
        #     rewrite /a /b ;
        #     # rewrite .*  /new redirect;
        # } 

        # location /b {
        #     rewrite /b /c permanent;
        # }

    # }
}
